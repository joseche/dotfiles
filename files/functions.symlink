#!/usr/bin/env bash
# vim:syntax=sh:ft=sh

set_title () {
  echo -n "\033]0;$1\007"
}

cdl () {
    # shellcheck disable=SC2164
    \cd "$@"
    ls -Gh
}

unicodes() {
printf "
Á = c1 | á = e1
É = c9 | é = e9
Í = cd | í = ed
Ó - d3 | ó = f3
Ú = da | ú = fa
Ñ = d1 | ñ = f1
"
}

dockerips() {
  DOCKER_IDS=($(docker ps -q))
  for id in $DOCKER_IDS; do
    docker inspect "$id" --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}} {{.Name}}'
  done
}

# function man() {
#   env \
#     LESS_TERMCAP_mb=$(printf "\e[1;31m") \
#     LESS_TERMCAP_md=$(printf "\e[1;31m") \
#     LESS_TERMCAP_me=$(printf "\e[0m") \
#     LESS_TERMCAP_se=$(printf "\e[0m") \
#     LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
#     LESS_TERMCAP_ue=$(printf "\e[0m") \
#     LESS_TERMCAP_us=$(printf "\e[1;32m") \
#     PAGER="${commands[less]:-$PAGER}" \
#     _NROFF_U=1 \
#       man "$@"
# }


aws_on(){
  if [ -z "${AWS_PROFILE}" ]; then read -r -p "AWS Profile: " PROFILE; else PROFILE="${AWS_PROFILE//_tmp_profile/}"; fi
  MFA_DEVICE_NUMBER="${MFA_NUMBER:=0}"
  TMP_PROFILE="${PROFILE//_tmp_profile/}_tmp_profile"
  unset VALID_SESSION
  aws --profile "${TMP_PROFILE}" sts get-caller-identity --output table 2>/dev/null && export AWS_PROFILE="${TMP_PROFILE}" && VALID_SESSION=true
  if [ -z ${VALID_SESSION} ]; then
    REGION="$(aws --profile "${PROFILE}" configure get region)" || (unset TOKEN; return 1)
    if [ -z "${TOKEN}" ]; then read -r -p "MFA token: " TOKEN; fi
    MFA_DEVICE="$(aws --profile "${PROFILE}" iam list-mfa-devices --query "MFADevices[${MFA_DEVICE_NUMBER}].SerialNumber" --output text)" || (unset TOKEN; return 1)
    SESSION="$(aws --profile "${PROFILE}" sts get-session-token \
                   --output text \
                   --serial-number "${MFA_DEVICE}" \
                   --token-code "${TOKEN}" \
                   --query '[Credentials.AccessKeyId, Credentials.SecretAccessKey, Credentials.SessionToken]' )" || (unset TOKEN; return 1)
    read -r access_key_id secret_access_key session_token <<< "$(echo "${SESSION}" | xargs )"
    if [ -n "${access_key_id}" ] && [ -n "${access_key_id}" ] && [ -n "${access_key_id}" ]; then
      aws --profile "${TMP_PROFILE}" configure set aws_access_key_id "${access_key_id}"
      aws --profile "${TMP_PROFILE}" configure set aws_secret_access_key "${secret_access_key}"
      aws --profile "${TMP_PROFILE}" configure set aws_session_token "${session_token}"
      if [ -n "${REGION}" ]; then
        aws --profile "${TMP_PROFILE}" configure set region "${REGION}"
      fi
      aws --profile "${TMP_PROFILE}" sts get-caller-identity --output table && \
      export AWS_PROFILE="${TMP_PROFILE}"
    fi
  fi
  unset TOKEN
  unset PROFILE
}

aws_off(){
  unset AWS_PROFILE
}

validate_ssl_bundle(){
  echo "Listing the certificates contained in $1"
  openssl crl2pkcs7 -nocrl -certfile $1 | openssl pkcs7 -print_certs -noout
}
