" vim: syntax=vim foldmethod=marker foldlevel=1

" Set options {{{

set nocompatible

syntax on

" display number on left side and status bar
set ruler
set number
set norelativenumber

" monitor file changes
set autoread

" let me change buffers when mod
set hidden

" display statusbar
set laststatus=2

" enable mouse
set mouse=a

" indents
set autoindent
set smartindent

" lines from cursor to bottom
set scrolloff=10

set wildmode=list:longest,full
set wildmenu
set wildignore=*~,*.o
set wildignore+=*DS_Store*
set wildignore+=*.pyc

" decent backspace
set backspace=indent,eol,start

" when searching
set showmatch
set incsearch

" Show search hits with highlight
" set nohlsearch
set hlsearch

" annoying sounds
set noerrorbells
set visualbell
set t_vb=

" required for osx clipboard
set clipboard=unnamed


" on splits
set splitright
set splitbelow

" default file format
set ffs=unix,mac,dos

set foldmethod=syntax
set foldlevel=4

set textwidth=120        " more realistic size
set colorcolumn=+1
highlight ColorColumn guibg=#2d2d2d ctermbg=246
" highlight Normal ctermfg=grey ctermbg=#0e143d

" highligh current row and column
set cursorline
set cursorcolumn

" Tabs
set tabstop=4
set shiftwidth=4
set expandtab

set wrap
set linebreak
set showbreak=↪

set background=dark
" set guifont=Monaco:h13
" set guifont=Source\ Code\ Pro\ for\ Powerline
" set guifontwide=Source\ Code\ Pro\ for\ Powerline
" set guifontwide=Monaco:h13
" set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 12
" set guifont=Ubuntu\ Mono\ derivative\ Powerline\ Regular
" set guifontwide=Ubuntu\ Mono\ derivative\ Powerline\ Regular

" should be on but making sure
set ttyfast
set title

set showcmd
set showmode

set viminfo='10,\"100,:100,%,n~/.viminfo

" encoding
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif

  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif

" invisible chars
set list
" set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:·,space:·
set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:·
" →

" history, backups and undo levels
set undofile
set history=1000
set undolevels=1000
set undoreload=10000
set backup                        " enable backups
set noswapfile
set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif


filetype plugin on
filetype indent on

let mapleader = "\<Space>"
let maplocalleader = "\\"

if exists('*jobstart')
    " NEOVIM ON
    set viminfo='10,\"100,:100,%,n~/.viminfo
else
    " Vim only
    set viminfo='10,\"100,:100,%,n~/.viminfo_vim
endif

" }}}

try
    " solarized requires solarized iterm's colors set in preferences
    " colorscheme solarized
    colorscheme dracula
    " colorscheme morning
catch
    colorscheme darkblue
endtry

" after changing the colorscheme, set italic for comments
" iterm2 needs a font with italics, also terminfo has to support italics
highlight Comment cterm=italic


" Reload when vimrc is changed
augroup reload_vimrc " {
autocmd!
autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

autocmd VimResized * :wincmd =

" Remove trailing spaces for file types:
au BufWritePre *.py,*.c,*.rb,*.java %s/\s\+$//e

" Python section
augroup python
au!
au FileType python setl expandtab     " Use spaces instead of tabs.
au FileType python setl tabstop=4     " A tab counts for 4 spaces.
au FileType python setl softtabstop=4 " Causes backspace to delete 4 spaces.
au FileType python setl shiftwidth=4  " Shift by 4 spaces.
au FileType python setl foldmethod=indent " fold method is indent for python
au FileType python nnoremap <Leader>r :!python %<CR>
augroup end

" Ruby section
augroup ruby
au!
au FileType ruby nnoremap <Leader>r :w<CR>:!ruby -r debug %<CR>
augroup end

" Javascript section
augroup javascript
au!
augroup end


" Git commits
augroup gitcommit
au!
au FileType gitcommit setl spell     " Enable spellchecking.
au FileType gitcommit setl expandtab " Use spaces instead of tabs.
augroup end

" Markdown
augroup markdown
au!
au FileType markdown setl spell         " Enable spellchecking.
au FileType markdown setl expandtab     " Use spaces instead of tabs.
au FileType markdown setl tabstop=2     " Lists are indented with 2 spaces.
au FileType markdown setl softtabstop=2 " Causes backspace to delete 2 spaces.
au FileType markdown setl shiftwidth=2  " Shift by 2 spaces.
augroup end



" Mappings {{{

imap jk <Esc>

nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>m :bp<CR>
nnoremap <Leader>c :tabnew<CR>
nnoremap <Leader>e :tabedit $MYVIMRC<CR>

nnoremap <Localleader>r :!python %<CR>
inoremap # X<BS>#

map <Leader>h <C-w>h
map <Leader>j <C-w>j
map <Leader>k <C-w>k
map <Leader>l <C-w>l

" I want it to work on all modes
map <C-l> :buffers<CR>

imap <C-]> <ESC>

" }}}

